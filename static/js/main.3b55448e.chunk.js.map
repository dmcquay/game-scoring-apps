{"version":3,"sources":["util/local-storage.js","greed/menu.svg","greed/Menu.js","greed/NewGameModal.js","greed/GreedRules.js","greed/RulesModal.js","greed/Grid.js","greed/AddPlayerModal.js","greed/selectors.js","greed/Greed.js","roster/Roster.js","App.js","registerServiceWorker.js","index.js"],"names":["global","localStorage","module","exports","getItem","key","this","setItem","value","Menu","props","closeThen","handler","onClose","className","onClick","onNewGame","onAddPlayer","onShowRules","onUndo","NewGameModal","tabIndex","role","type","aria-label","aria-hidden","GreedRules","RulesModal","Grid","state","player","players","evt","setState","target","completedRounds","onChange","handleSelectPlayer","bind","map","p","r","idx","React","Component","AddPlayerModal","playerName","initialScore","addPlayer","setFieldValue","name","R","require","getPlayerTrickCount","round","path","getPlayerBid","getCompletedRoundsCount","compose","filter","prop","length","getCompletedRounds","count","rounds","slice","computeScoreForPlayerRound","bid","tricks","undefined","getLeaderboard","playerScores","score","numRounds","totalScore","getPlayerTotalScore","reverse","sortBy","getOrderedPlayersForBidding","first","concat","DEFAULT_STATE","stage","showMenu","showNewGameModal","showRulesModal","showAddPlayerModal","showGrid","playerInput","playerInputError","initialPoints","previousStates","Greed","gameStateString","JSON","parse","_","nextState","stringify","find","prevState","pop","console","log","preventDefault","push","bids","trickCount","tricksLens","setPlayerTrickCount","newCount","Math","max","parseInt","roundComplete","incrementPlayerTrickCount","decrementPlayerTrickCount","disabled","completeRound","maxBidder","nextPlayerToBid","getNextPlayerToBid","maxBidValue","dealer","v","submitBid","doneBidding","onSubmit","id","placeholder","updatePlayerInput","startGame","style","color","leaders","closeNewGameModal","startNewGame","closeRulesModal","closeAddPlayerModal","addPlayerMidGame","renderedStage","renderInputPlayers","renderBids","renderTricks","menuProps","closeMenu","onShowGrid","undo","openMenu","src","menuIcon","alt","hideGrid","renderLeaderboard","renderNewGameModal","renderRulesModal","renderAddPlayerModal","updatePlayTimeInterval","playerFormName","isPlaying","playTimeStart","totalGameTime","formatDuration","durationMillis","floor","padStart","useState","getInitialState","_setState","fnOrState","newState","updatePlayTimes","elapsedMillis","Date","now","Object","values","playTimeMillis","reduce","byIds","setInterval","togglePlayerIsPlaying","playerId","inPlay","x","onTheBench","avgPlayTime","sum","uuid","v4","clearInterval","PLAYER_STYLE_MAP","UNDERPLAYED","backgroundColor","NORMAL","OVERPLAYED","Player","playRatio","status","margin","padding","PlayerList","listStyleType","AppsList","href","App","element","Roster","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3b55448e.chunk.js","sourcesContent":["if (global.localStorage) {\n    module.exports = global.localStorage\n} else {\n    // for testing only\n    module.exports = {\n        getItem: function (key) {\n            return this[key];\n        },\n        setItem: function (key, value) {\n            this[key] = value;\n        }\n    }\n}","module.exports = __webpack_public_path__ + \"static/media/menu.0db3c92e.svg\";","import React from 'react'\n\nexport default function Menu(props) {\n    function closeThen(handler) {\n        return function() {\n            props.onClose()\n            handler()\n        }\n    }\n\n    return (\n        <nav className=\"menu\">\n            <ul>\n                <li onClick={closeThen(props.onNewGame)}>New Game</li>\n                <li onClick={closeThen(props.onAddPlayer)}>Add Player</li>\n                <li onClick={closeThen(props.onShowRules)}>Rules</li>\n                {/*<li onClick={closeThen(props.onShowGrid)}>Show Grid</li>*/}\n                <li onClick={closeThen(props.onUndo)}>Undo</li>\n                <li onClick={props.onClose}>Close Menu</li>\n            </ul>\n        </nav>\n    )\n}","import React from 'react'\n\nexport default function NewGameModal(props) {\n    const {\n        onClose,\n        onNewGame\n    } = props\n\n    return (\n        <div>\n            <div className=\"modal show\" tabIndex=\"-1\" role=\"dialog\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\">New Game</h5>\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={onClose}>\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <p>Are you sure you want to start a new game? Current game progress will be lost.</p>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-lg btn-primary\" onClick={onNewGame}>\n                                Yes, new game\n                            </button>\n                            <button type=\"button\" className=\"btn btn-lg btn-secondary\" onClick={onClose}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"modal-backdrop show\"></div>\n        </div>\n    )\n}","import React from 'react'\n\nexport default function GreedRules() {\n    return (\n        <div className=\"rules\">\n            <h3>Getting Started</h3>\n\n            <p>Greed consists of several rounds. In each round, players are dealt as many cards as the round. For\n                example, in round one, each player gets one card. In round two each player gets two cards. You can play\n                as many rounds as you want until you run out of cards (e.g. maximum of 10 rounds for 5 players).</p>\n\n            <h3>The Bidding Phase</h3>\n\n            <p>The bidding phase is next, but to understand bidding, you must first understand the next phase (the\n                “Tricks” phase), so we’ll come back to bidding in a moment.</p>\n\n            <h3>The Tricks Phase</h3>\n\n            <p>The goal of this phase is to win as many tricks as you can. A trick is when every player puts down one\n                card. The player with the best card wins the trick. The first card of the trick determines the suit.\n                We’ll call this the leading suit. To win the trick, a subsequent player must play a larger card of the\n                same suit (or of the trump suit, which we’ll explain in a moment).</p>\n\n            <p>If a player has a card of the leading suit, she must play a card of that suit.</p>\n\n            <p>For the first trick of the round, the player who bids highest plays first. After that, the winner of the\n                previous trick plays first.</p>\n\n            <h4>The Trump Suit</h4>\n\n            <p>After dealing, the next card is flipped over to determine the trump suit for that round. Normally, to win\n                a trick, you must play a card of the same suit as the leading card. Cards of all other suits have zero\n                value. The trump suit is an exception to this. Cards of the trump suit all have a higher value than the\n                leading suit. If the leading suit is hearts and the trump suit is spades, a 2 of spades has a higher\n                value than the ace of hearts.</p>\n\n            <p>The trump suit cannot be played in the first trick unless a player has no other cards in their hand. The\n                trump suit cannot be the first card played for any trick until the trump suit has been “broken.” To\n                “break” the trump suit for a given round, a player must not have a card of the leading suit in their\n                hand and they choose to play a card of the trump suit at that time. In rare cases, if a trump card is\n                played on the first trick (because that player has no non-trump cards in their hand), that counts as\n                “breaking” the trump suit as well.</p>\n\n            <h4>More on Bidding</h4>\n\n            <p>Once the cards are dealt (before the Tricks phase), the bidding phase begins. The player to the dealer’s\n                left bids first and then bidding proceeds clockwise. Each player states how many tricks they think they\n                will win for that round. The player that bids highest gets to play first on the first trick.</p>\n\n            <h3>Scoring</h3>\n\n            <p>Your score for each round is determined by your bid and how many tricks you win. Winning a trick is worth\n                one point. Winning a trick that you bid for is worth 3 points. But beware because if you win fewer\n                tricks than you bid, then you get negative three points for each trick you bid and no points for each\n                trick you won.</p>\n\n            <p>Let’s look at a few scoring examples:</p>\n\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th>Bid</th>\n                    <th>Tricks won</th>\n                    <th>Score</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td>0</td>\n                    <td>2</td>\n                    <td>2</td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                    <td>3</td>\n                    <td>7</td>\n                </tr>\n                <tr>\n                    <td>3</td>\n                    <td>2</td>\n                    <td>-9</td>\n                </tr>\n                </tbody>\n            </table>\n\n            <h3>Other details</h3>\n\n            <p>Greed is played without jokers.</p>\n        </div>\n    )\n}","import React from 'react'\n\nimport GreedRules from './GreedRules'\n\nexport default function RulesModal(props) {\n    const {\n        onClose\n    } = props\n\n    return (\n        <div>\n            <div className=\"modal show\" tabIndex=\"-1\" role=\"dialog\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\">Rules of Greed</h5>\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={onClose}>\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body rules-modal-body\">\n                            <GreedRules/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"modal-backdrop show\"></div>\n        </div>\n    )\n}","import React from 'react'\n\nexport default class Grid extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            player: props.players[0]\n        }\n    }\n\n    handleSelectPlayer(evt) {\n        this.setState({player: evt.target.value})\n    }\n\n    render() {\n        const {\n            onClose,\n            players,\n            completedRounds\n        } = this.props\n\n        const {\n            player\n        } = this.state\n\n        return (\n            <div>\n                <div className=\"form-group\">\n                    <select className=\"form-control\" value={player} onChange={this.handleSelectPlayer.bind(this)}>\n                        {players.map(p => <option key={p} value={p}>{p}</option>)}\n                    </select>\n                </div>\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Bid</th>\n                        <th>Won</th>\n                        <th>Points</th>\n                        <th>Total</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {completedRounds.map((r, idx) => <tr key={idx}>\n                        <td key={`grid-${idx}`}>{idx+1}</td>\n                        <td key={`grid-${idx}-bid`}>3</td>\n                        <td key={`grid-${idx}-won`}>4</td>\n                        <td key={`grid-${idx}-points`}>10</td>\n                        <td key={`grid-${idx}-total`}>15</td>\n                    </tr>)}\n                    </tbody>\n                </table>\n                <button className=\"btn btn-secondary\" onClick={onClose}>Close</button>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nexport default class AddPlayerModal extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerName: '',\n            initialScore: '0'\n        }\n        this.addPlayer = this.addPlayer.bind(this)\n        this.setFieldValue = this.setFieldValue.bind(this)\n    }\n\n    addPlayer() {\n        this.props.onAddPlayer(this.state.playerName, this.state.initialScore)\n        this.props.onClose()\n    }\n\n    setFieldValue(evt) {\n        const name = evt.target.name\n        const value = evt.target.value\n        this.setState(state => ({[name]: value}))\n    }\n\n    render() {\n        const {onClose} = this.props\n\n        return (\n            <div>\n                <div className=\"modal show\" tabIndex=\"-1\" role=\"dialog\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\">Add Player Mid-Game</h5>\n                                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={onClose}>\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div className=\"modal-body\">\n                                <div className=\"form-group\">\n                                    <label>Player Name:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"playerName\" value={this.state.playerName}\n                                           onChange={this.setFieldValue}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Initial Score:</label>\n                                    <input type=\"number\" className=\"form-control\" name=\"initialScore\" value={this.state.initialScore}\n                                           onChange={this.setFieldValue}/>\n                                </div>\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type=\"button\" className=\"btn btn-lg btn-primary\" onClick={this.addPlayer}>Add Player</button>\n                                <button type=\"button\" className=\"btn btn-lg btn-secondary\" onClick={onClose}>Cancel</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"modal-backdrop show\"></div>\n            </div>\n        )\n    }\n}","const R = require('ramda')\n\nexport function getPlayerTrickCount(player, round, state) {\n    return R.path(['rounds', round, 'tricks', player], state) || 0\n}\n\nexport function getPlayerBid(player, round, state) {\n    return R.path(['rounds', round, 'bids', player], state)\n}\n\nexport function getCompletedRoundsCount(state) {\n    const completeRounds = R.compose(\n        R.filter(R.prop('complete')),\n        R.prop('rounds')\n    )(state)\n\n    return completeRounds.length\n}\n\nexport function getCompletedRounds(state) {\n    const count = getCompletedRoundsCount(state)\n    return state.rounds.slice(0, count)\n}\n\nexport function computeScoreForPlayerRound(player, round, state) {\n    const bid = getPlayerBid(player, round, state)\n    const tricks = getPlayerTrickCount(player, round, state)\n\n    if (bid === undefined)\n        return 0\n    if (tricks >= bid)\n        return (bid * 3) + (tricks - bid)\n    else\n        return bid * -3\n}\n\nexport function getPlayerTotalScore(player, state) {\n    const numRounds = getCompletedRoundsCount(state)\n    let totalScore = R.path(['initialPoints', player], state) || 0\n    for (let round = 0; round < numRounds; round++) {\n        totalScore += computeScoreForPlayerRound(player, round, state)\n    }\n    return totalScore\n}\n\nexport function getLeaderboard(state) {\n    const playerScores = state.players.map(player => {\n        const score = getPlayerTotalScore(player, state)\n        return {player, score}\n    })\n\n    return R.reverse(R.sortBy(R.prop('score'), playerScores))\n}\n\nexport function getDealer(players, round) {\n    const idx = round % players.length\n    return players[idx]\n}\n\nexport function getOrderedPlayersForBidding(players, round) {\n    const first = (round + 1) % players.length\n    return players.slice(first).concat(players.slice(0, first))\n}","import React, {Component} from 'react'\nimport * as R from 'ramda'\n\nimport Menu from './Menu'\nimport NewGameModal from './NewGameModal'\nimport RulesModal from './RulesModal'\nimport Grid from './Grid'\nimport AddPlayerModal from './AddPlayerModal'\nimport menuIcon from './menu.svg'\nimport './Greed.css'\nimport {\n    getPlayerTrickCount,\n    getPlayerBid,\n    getLeaderboard,\n    getDealer,\n    getOrderedPlayersForBidding,\n    getCompletedRounds\n} from './selectors'\nimport localStorage from '../util/local-storage'\n\nconst DEFAULT_STATE = {\n    stage: 'input-players',\n    showMenu: false,\n    showNewGameModal: false,\n    showRulesModal: false,\n    showAddPlayerModal: false,\n    showGrid: false,\n    playerInput: '',\n    playerInputError: undefined,\n    players: [],\n    round: 0,\n    rounds: [],\n    initialPoints: {}\n}\n\nconst previousStates = []\n\nclass Greed extends Component {\n    constructor(props) {\n        super(props)\n        this.state = DEFAULT_STATE\n\n        const gameStateString = localStorage.getItem('greedState')\n        if (gameStateString) {\n            this.state = JSON.parse(gameStateString)\n        }\n    }\n\n    componentWillUpdate(_, nextState) {\n        localStorage.setItem('greedState', JSON.stringify(nextState))\n    }\n\n    updatePlayerInput(name) {\n        let playerInputError = undefined\n        if (name && this.state.players.find(player => player === name)) {\n            playerInputError = 'Player names must be unique'\n        }\n\n        this.setState(state => ({\n            playerInput: name,\n            playerInputError\n        }))\n    }\n\n    undo() {\n        if (!previousStates.length) {\n            console.log('Nothing left to undo')\n            return\n        }\n        const prevState = previousStates.pop()\n        console.log('restoring state', prevState)\n        this.setState(prevState)\n    }\n\n    addPlayer(evt) {\n        evt.preventDefault()\n\n        if (!this.state.playerInputError) {\n            previousStates.push(this.state)\n            this.setState(state => ({\n                players: [\n                    ...state.players,\n                    state.playerInput\n                ],\n                playerInput: ''\n            }))\n        }\n\n        return false\n    }\n\n    startGame(evt) {\n        evt.preventDefault()\n        if (this.state.playerInput) {\n            this.addPlayer(evt)\n        }\n        previousStates.push(this.state)\n        this.setState(state => ({stage: 'bids'}))\n        return false\n    }\n\n    getNextPlayerToBid() {\n        const bids = R.path(['rounds', this.state.round, 'bids'], this.state) || {}\n        const orderedPlayers = getOrderedPlayersForBidding(this.state.players, this.state.round)\n        return orderedPlayers.find(player => bids[player] === undefined)\n    }\n\n    submitBid(player, bid) {\n        previousStates.push(this.state)\n        this.setState(state => {\n            return R.set(R.lensPath(['rounds', state.round, 'bids', player]), bid, state)\n        })\n    }\n\n    setPlayerTrickCount(player, trickCount) {\n        const tricksLens = R.lensPath(['rounds', this.state.round, 'tricks', player])\n        this.setState(state => R.set(tricksLens, trickCount, state))\n    }\n\n    incrementPlayerTrickCount(player) {\n        this.setPlayerTrickCount(player, getPlayerTrickCount(player, this.state.round, this.state) + 1)\n    }\n\n    decrementPlayerTrickCount(player) {\n        const newCount = getPlayerTrickCount(player, this.state.round, this.state) - 1\n        this.setPlayerTrickCount(player, Math.max(0, newCount))\n    }\n\n    completeRound() {\n        previousStates.push(this.state)\n        this.setState(state => {\n            return R.compose(\n                R.set(R.lensPath(['rounds', state.round, 'complete']), true),\n                R.set(R.lensProp('stage'), 'bids'),\n                R.set(R.lensProp('round'), state.round + 1)\n            )(state)\n        })\n    }\n\n    doneBidding() {\n        previousStates.push(this.state)\n        this.setState(state => ({\n            ...state,\n            stage: 'tricks'\n        }))\n    }\n\n    showGrid() {\n        this.setState(state => ({showGrid: true}))\n    }\n\n    hideGrid() {\n        this.setState(state => ({showGrid: false}))\n    }\n\n    openMenu() {\n        this.setState(state => ({showMenu: true}))\n    }\n\n    closeMenu() {\n        this.setState(state => ({showMenu: false}))\n    }\n\n    showRulesModal() {\n        this.setState(state => ({showRulesModal: true}))\n    }\n\n    closeRulesModal() {\n        this.setState(state => ({showRulesModal: false}))\n    }\n\n    showNewGameModal() {\n        this.setState(state => ({showNewGameModal: true}))\n    }\n\n    closeNewGameModal() {\n        this.setState(state => ({showNewGameModal: false}))\n    }\n\n    showAddPlayerModal() {\n        this.setState(state => ({showAddPlayerModal: true}))\n    }\n\n    closeAddPlayerModal() {\n        this.setState(state => ({showAddPlayerModal: false}))\n    }\n\n    startNewGame() {\n        this.setState(state => DEFAULT_STATE)\n    }\n\n    addPlayerMidGame(playerName, initialPoints) {\n        this.setState(state => ({\n            players: [\n                ...this.state.players,\n                playerName\n            ],\n            initialPoints: {\n                ...this.state.initialPoints,\n                [playerName]: parseInt(initialPoints, 10)\n            }\n        }))\n    }\n\n    renderTricks() {\n        const trickSum = R.compose(\n            R.sum,\n            R.values,\n            R.path(['rounds', this.state.round, 'tricks'])\n        )(this.state)\n\n        const roundComplete = trickSum === this.state.round + 1\n\n        return (\n            <div>\n                {this.state.players.map(player =>\n                    <div key={player} className=\"player-tricks-row\">\n                        <div className=\"\">\n                            {player} ({getPlayerBid(player, this.state.round, this.state)})\n                        </div>\n                        <div className=\"player-tricks-scoring-controls\">\n                            <button className=\"btn btn-lg btn-primary\"\n                                    onClick={() => this.incrementPlayerTrickCount(player)}>+\n                            </button>\n                            <span\n                                className=\"player-tricks-count\">{getPlayerTrickCount(player, this.state.round, this.state)}</span>\n                            <button className=\"btn btn-lg btn-primary\"\n                                    onClick={() => this.decrementPlayerTrickCount(player)}>-\n                            </button>\n                        </div>\n                    </div>\n                )}\n                <button className=\"btn btn-lg btn-block btn-primary\" disabled={!roundComplete}\n                        onClick={this.completeRound.bind(this)}>Complete Round\n                </button>\n            </div>\n        )\n    }\n\n    renderBids() {\n        const nextPlayerToBid = this.getNextPlayerToBid()\n        const orderedPlayers = getOrderedPlayersForBidding(this.state.players, this.state.round)\n        const playersWithBids = orderedPlayers.filter(player => getPlayerBid(player, this.state.round, this.state) !== undefined)\n        const bids = playersWithBids.map(player => ({player, bid: getPlayerBid(player, this.state.round, this.state)}))\n\n        let maxBidder\n        if (bids.length) {\n            const maxBidValue = Math.max(...bids.map(({bid}) => bid))\n            const maxBid = bids.find(({player, bid}) => bid === maxBidValue)\n            maxBidder = maxBid.player\n        }\n\n        const dealer = getDealer(this.state.players, this.state.round)\n\n        return (\n            <div className=\"bids\">\n                {!!nextPlayerToBid && <div>\n                    <h2>Bid for {nextPlayerToBid}</h2>\n                    {R.range(0, this.state.round + 2).map(v => <button className=\"btn btn-lg btn-primary btn-bid\"\n                                                                       key={v}\n                                                                       onClick={() => this.submitBid(nextPlayerToBid, v)}>{v}</button>)}\n                </div>}\n\n                {!bids.length && <p>\n                    {dealer} is dealing {this.state.round + 1} card{this.state.round > 0 ? 's' : ''}.\n                    <br/>{nextPlayerToBid} bids first.</p>}\n\n                {!!bids.length && <h3>Bids</h3>}\n                {!!bids.length && <ul className=\"list-unstyled\">\n                    {bids.map(({player, bid}) => <li key={`bid-list-item-${player}`}>{player}: {bid}</li>)}\n                </ul>}\n\n                {!nextPlayerToBid && <div>\n                    <p>All bids are in. {maxBidder} goes first.</p>\n                    <button onClick={this.doneBidding.bind(this)} className=\"btn btn-lg btn-primary\">Continue</button>\n                </div>}\n            </div>\n        )\n    }\n\n    renderInputPlayers() {\n        return (\n            <div>\n                <h2>Players</h2>\n                {this.state.players.length\n                    ? <ul>\n                        {this.state.players.map(player => <li key={player}>{player}</li>)}\n                    </ul>\n                    : <p>No players yet.</p>\n                }\n                <form onSubmit={this.addPlayer.bind(this)}>\n                    <div className=\"form-group\">\n                        <input className=\"form-control\" id=\"player-name-input\" type=\"text\" placeholder=\"Player name\"\n                               onChange={evt => this.updatePlayerInput(evt.target.value)}\n                               value={this.state.playerInput}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"add-player-btn btn btn-primary\" onClick={this.addPlayer.bind(this)}>\n                            Add Player\n                        </button>\n                        <button className=\"add-player-btn btn btn-success\" onClick={this.startGame.bind(this)}>\n                            Start\n                        </button>\n                        {this.state.playerInputError &&\n                        <div className=\"alert alert-danger\" style={{color: 'red'}}>{this.state.playerInputError}</div>}\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\n    renderLeaderboard() {\n        const leaders = getLeaderboard(this.state)\n\n        if (!leaders.length || this.state.stage === 'input-players')\n            return null\n\n        return (\n            <div className=\"scores\">\n                <div className=\"container\">\n                    <h3 className=\"scores-title\">Leaders</h3>\n                    <ul className=\"scores-list\">\n                        {leaders.map(({player, score}) => <li key={player}>{player} ({score})</li>)}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n\n    renderNewGameModal() {\n        if (!this.state.showNewGameModal)\n            return null\n\n        return <NewGameModal\n            onClose={this.closeNewGameModal.bind(this)}\n            onNewGame={this.startNewGame.bind(this)}\n        />\n    }\n\n    renderRulesModal() {\n        if (!this.state.showRulesModal)\n            return null\n\n        return <RulesModal onClose={this.closeRulesModal.bind(this)}/>\n    }\n\n    renderAddPlayerModal() {\n        if (!this.state.showAddPlayerModal)\n            return null\n\n        return <AddPlayerModal\n            onClose={this.closeAddPlayerModal.bind(this)}\n            onAddPlayer={this.addPlayerMidGame.bind(this)}\n        />\n    }\n\n    render() {\n        const stage = this.state.stage\n\n        let renderedStage\n\n        if (stage === 'input-players')\n            renderedStage = this.renderInputPlayers()\n        else if (stage === 'bids')\n            renderedStage = this.renderBids()\n        else if (stage === 'tricks')\n            renderedStage = this.renderTricks()\n\n        const menuProps = {\n            onClose: this.closeMenu.bind(this),\n            onShowRules: this.showRulesModal.bind(this),\n            onNewGame: this.showNewGameModal.bind(this),\n            onAddPlayer: this.showAddPlayerModal.bind(this),\n            onShowGrid: this.showGrid.bind(this),\n            onUndo: this.undo.bind(this)\n        }\n\n        return (\n            <div>\n                <main>\n                    <header>\n                        <div className=\"header-container container\">\n                            <h1 className=\"header-title\">\n                                <img className=\"menu-cta\" onClick={this.openMenu.bind(this)} src={menuIcon} alt=\"\"/>\n                                <span>Greed</span>\n                            </h1>\n                            {this.state.stage !== 'input-players' && <h3>Round {this.state.round + 1}</h3>}\n                        </div>\n                    </header>\n                    <div className=\"stage container\">\n                        {this.state.showGrid\n                            ? <Grid players={this.state.players}\n                                    completedRounds={getCompletedRounds(this.state)}\n                                    onClose={this.hideGrid.bind(this)}/>\n                            : renderedStage\n                        }\n                    </div>\n                    {this.renderLeaderboard()}\n                </main>\n                {this.renderNewGameModal()}\n                {this.renderRulesModal()}\n                {this.renderAddPlayerModal()}\n                {this.state.showMenu && <Menu {...menuProps} />}\n            </div>\n        )\n    }\n}\n\nexport default Greed","import * as R from 'ramda'\nimport React, {useState} from 'react'\nimport uuid from 'uuid'\n\nlet updatePlayTimeInterval = null\n\nconst DEFAULT_STATE = {\n  players: {},\n  playerFormName: '',\n  isPlaying: false,\n  playTimeStart: undefined,\n  totalGameTime: 0\n}\n\nconst getInitialState = () => {\n  const gameStateString = localStorage.getItem('rosterState')\n  if (gameStateString) {\n    return JSON.parse(gameStateString)\n  } else {\n    return DEFAULT_STATE\n  }\n}\n\nconst formatDuration = (durationMillis) => {\n  return '' + Math.floor(durationMillis / 1000 / 60) + ':' +\n    ('' + Math.floor(durationMillis / 1000 % 60)).padStart(2, '0')\n}\n\nexport default () => {\n  const [state, _setState] = useState(getInitialState())\n\n  const setState = (fnOrState) => {\n    _setState(state => {\n      const newState = typeof(fnOrState) === 'function' ? fnOrState(state) : fnOrState\n      localStorage.setItem('rosterState', JSON.stringify(newState))\n      return newState\n    })\n  }\n\n  const addPlayer = () => {\n    const id = uuid.v4()\n    setState(state => ({\n      ...state,\n      playerFormName: '',\n      players: {\n        ...state.players,\n        [id]: {\n          id,\n          name: state.playerFormName,\n          playTimeMillis: 0,\n          isPlaying: false\n        }\n      }\n    }))\n  }\n\n  const updatePlayTimes = () => {\n    setState(state => {\n      let elapsedMillis = Date.now() - state.playTimeStart\n      const playTimeStart = Date.now()\n\n      const players = Object.values(state.players).map(player => {\n        return {\n          ...player,\n          playTimeMillis: player.isPlaying ? player.playTimeMillis + elapsedMillis : player.playTimeMillis\n        }\n      }).reduce((byIds, player) => {\n        return {\n          ...byIds,\n          [player.id]: player\n        }\n      }, {})\n\n      return {\n        ...state,\n        players,\n        playTimeStart,\n        totalGameTime: state.totalGameTime + elapsedMillis\n      }\n    })\n  }\n\n  if (state.isPlaying && updatePlayTimeInterval == null) {\n    updatePlayTimeInterval = setInterval(updatePlayTimes, 1000);\n  }\n\n  const toggleIsPlaying = () => {\n    setState(state => {\n      const isPlaying = !state.isPlaying\n      if (isPlaying) {\n        updatePlayTimeInterval = setInterval(updatePlayTimes, 1000);\n      } else {\n        clearInterval(updatePlayTimeInterval)\n        updatePlayTimeInterval = null\n      }\n      return {\n        ...state,\n        isPlaying,\n        playTimeStart: Date.now()\n      }\n    }, () => {\n      console.log('it got called') \n    })\n  }\n\n  const setPlayerFormName = (evt) => {\n    const playerFormName = evt.target.value\n    setState(state => ({\n      ...state,\n      playerFormName\n    }))\n  }\n\n  const togglePlayerIsPlaying = (playerId) => () => {\n    setState(state => ({\n      ...state,\n      players: {\n        ...state.players,\n        [playerId]: {\n          ...state.players[playerId],\n          isPlaying: !state.players[playerId].isPlaying\n        }\n      }\n    }))\n  }\n\n  const newGame = () => {\n    setState(state => {\n      const players = Object.values(state.players).map(player => {\n        return {\n          ...player,\n          playTimeMillis: 0,\n          isPlaying: false\n        }\n      }).reduce((byIds, player) => {\n        return {\n          ...byIds,\n          [player.id]: player\n        }\n      }, {})\n\n      return {\n        ...state,\n        isPlaying: false,\n        players\n      }\n    })\n  }\n\n  const players = R.sortBy(R.prop('playTimeMillis'), Object.values(state.players))\n  const inPlay = players.filter(x => x.isPlaying)\n  const onTheBench = players.filter(x => !x.isPlaying)\n\n  const totalPlayTime = players.reduce((sum, player) => sum + player.playTimeMillis, 0)\n  const avgPlayTime = totalPlayTime / players.length\n\n  return <div>\n    <input type=\"text\" value={state.playerFormName} onChange={setPlayerFormName} />\n    <button onClick={addPlayer}>Add Player</button>\n    <div>In Play</div>\n    <PlayerList {...{players: inPlay, togglePlayerIsPlaying, avgPlayTime}} />\n    <div>On the Bench</div>\n    <PlayerList {...{players: onTheBench, togglePlayerIsPlaying, avgPlayTime}} />\n    <button onClick={toggleIsPlaying}>{state.isPlaying ? 'Pause' : 'Play'}</button>\n    <button onClick={newGame}>New Game</button>\n    <div>Total Game Time: {formatDuration(state.totalGameTime)}</div>\n  </div>\n}\n\nconst PLAYER_STYLE_MAP = {\n  UNDERPLAYED: { backgroundColor: 'lightblue' },\n  NORMAL: {},\n  OVERPLAYED: { backgroundColor: 'pink' }\n}\n\nconst Player = ({player, togglePlayerIsPlaying, avgPlayTime}) => {\n  const playRatio = player.playTimeMillis / avgPlayTime\n  \n  let status = 'NORMAL'\n  if (avgPlayTime > 5 * 60 * 1000) {\n    if (playRatio < .7) status = 'UNDERPLAYED'\n    else if (playRatio > 1.3) status = 'OVERPLAYED'\n  }\n\n  const style = {\n    margin: '5px 0',\n    padding: '5px 10px',\n    ...PLAYER_STYLE_MAP[status]\n  }\n\n  return <button onClick={togglePlayerIsPlaying(player.id)} style={style}>\n    {player.name} {formatDuration(player.playTimeMillis)}\n  </button>\n}\n\nconst PlayerList = ({players, togglePlayerIsPlaying, avgPlayTime}) => {\n  return <ul style={{listStyleType: 'none', margin: 0, padding: '5px'}}>\n    {players.map(player => {\n      return <li style={{margin: 0, padding: 0}} key={player.id}>\n        <Player player={player} togglePlayerIsPlaying={togglePlayerIsPlaying} avgPlayTime={avgPlayTime} />\n      </li>\n    })}\n  </ul>\n}","import React from 'react'\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport Greed from './greed/Greed'\nimport Roster from './roster/Roster'\n\nfunction AppsList() {\n  return <ul>\n    <li><a href=\"/game-scoring-apps/greed\">Greed</a></li>\n    <li><a href=\"/game-scoring-apps/roster\">Roster</a></li>\n  </ul>\n}\n\nexport default function App() {\n  return <BrowserRouter>\n    <Routes>\n      <Route path=\"/game-scoring-apps\" element={<AppsList />} />\n      <Route path=\"/game-scoring-apps/greed\" element={<Greed />} />\n      <Route path=\"/game-scoring-apps/roster\" element={<Roster />} />\n    </Routes>\n  </BrowserRouter>\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}